/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.kalotay.akalib;

public class InterestRateScenario {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected InterestRateScenario(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(InterestRateScenario obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AkaApiJNI.delete_InterestRateScenario(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public InterestRateScenario(double years, InterestRateModel horizonmodel, InterestRateScenario.SCENTYPE arg2) {
    this(AkaApiJNI.new_InterestRateScenario__SWIG_1(years, InterestRateModel.getCPtr(horizonmodel), horizonmodel, arg2.swigValue()), true);
  }

  public InterestRateScenario(double years, InterestRateModel horizonmodel) {
    this(AkaApiJNI.new_InterestRateScenario__SWIG_2(years, InterestRateModel.getCPtr(horizonmodel), horizonmodel), true);
  }

  public boolean AddTransition(double years, InterestRateModel arg1) {
    return AkaApiJNI.InterestRateScenario_AddTransition(swigCPtr, this, years, InterestRateModel.getCPtr(arg1), arg1);
  }

  public boolean SetEfficiencyThreshold(double arg0) {
    return AkaApiJNI.InterestRateScenario_SetEfficiencyThreshold(swigCPtr, this, arg0);
  }

  public void SetReinvestStandard() {
    AkaApiJNI.InterestRateScenario_SetReinvestStandard(swigCPtr, this);
  }

  public void SetReinvestAtZeroOAS() {
    AkaApiJNI.InterestRateScenario_SetReinvestAtZeroOAS(swigCPtr, this);
  }

  public void SetReinvestAtFixed(double arg0) {
    AkaApiJNI.InterestRateScenario_SetReinvestAtFixed(swigCPtr, this, arg0);
  }

  public final static class SCENTYPE {
    public final static InterestRateScenario.SCENTYPE NOW = new InterestRateScenario.SCENTYPE("NOW");
    public final static InterestRateScenario.SCENTYPE GRADUAL = new InterestRateScenario.SCENTYPE("GRADUAL");
    public final static InterestRateScenario.SCENTYPE THEN = new InterestRateScenario.SCENTYPE("THEN");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SCENTYPE swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SCENTYPE.class + " with value " + swigValue);
    }

    private SCENTYPE(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SCENTYPE(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SCENTYPE(String swigName, SCENTYPE swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SCENTYPE[] swigValues = { NOW, GRADUAL, THEN };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
