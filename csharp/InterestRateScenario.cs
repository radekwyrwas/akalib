/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace AndrewKalotayAssociates {

using System;
using System.Runtime.InteropServices;

public class InterestRateScenario : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal InterestRateScenario(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(InterestRateScenario obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~InterestRateScenario() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkaApiPINVOKE.delete_InterestRateScenario(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public InterestRateScenario(double years, InterestRateModel horizonmodel, InterestRateScenario.SCENTYPE arg2) : this(AkaApiPINVOKE.new_InterestRateScenario__SWIG_1(years, InterestRateModel.getCPtr(horizonmodel), (int)arg2), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public InterestRateScenario(double years, InterestRateModel horizonmodel) : this(AkaApiPINVOKE.new_InterestRateScenario__SWIG_2(years, InterestRateModel.getCPtr(horizonmodel)), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool AddTransition(double years, InterestRateModel arg1) {
    bool ret = AkaApiPINVOKE.InterestRateScenario_AddTransition(swigCPtr, years, InterestRateModel.getCPtr(arg1));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetEfficiencyThreshold(double arg0) {
    bool ret = AkaApiPINVOKE.InterestRateScenario_SetEfficiencyThreshold(swigCPtr, arg0);
    return ret;
  }

  public void SetReinvestStandard() {
    AkaApiPINVOKE.InterestRateScenario_SetReinvestStandard(swigCPtr);
  }

  public void SetReinvestAtZeroOAS() {
    AkaApiPINVOKE.InterestRateScenario_SetReinvestAtZeroOAS(swigCPtr);
  }

  public void SetReinvestAtFixed(double arg0) {
    AkaApiPINVOKE.InterestRateScenario_SetReinvestAtFixed(swigCPtr, arg0);
  }

  public enum SCENTYPE {
    NOW,
    GRADUAL,
    THEN
  }

}

}
