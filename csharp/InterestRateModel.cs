/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace AndrewKalotayAssociates {

using System;
using System.Runtime.InteropServices;

public class InterestRateModel : Status {
  private HandleRef swigCPtr;

  internal InterestRateModel(IntPtr cPtr, bool cMemoryOwn) : base(AkaApiPINVOKE.InterestRateModel_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(InterestRateModel obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~InterestRateModel() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkaApiPINVOKE.delete_InterestRateModel(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public InterestRateModel(InterestRateModel.INPUTTYPE arg0) : this(AkaApiPINVOKE.new_InterestRateModel__SWIG_0((int)arg0), true) {
  }

  public InterestRateModel() : this(AkaApiPINVOKE.new_InterestRateModel__SWIG_1(), true) {
  }

  public InterestRateModel(InterestRateModel arg0, double forward_period) : this(AkaApiPINVOKE.new_InterestRateModel__SWIG_2(InterestRateModel.getCPtr(arg0), forward_period), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public InterestRateModel(InterestRateModel arg0) : this(AkaApiPINVOKE.new_InterestRateModel__SWIG_3(InterestRateModel.getCPtr(arg0)), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool SetRate(double year, double rate) {
    bool ret = AkaApiPINVOKE.InterestRateModel_SetRate(swigCPtr, year, rate);
    return ret;
  }

  public bool SetFactor(double year, double factor) {
    bool ret = AkaApiPINVOKE.InterestRateModel_SetFactor(swigCPtr, year, factor);
    return ret;
  }

  public bool SetZeroRate(double year, double zerorate) {
    bool ret = AkaApiPINVOKE.InterestRateModel_SetZeroRate(swigCPtr, year, zerorate);
    return ret;
  }

  public void RemovePoint(double year) {
    AkaApiPINVOKE.InterestRateModel_RemovePoint(swigCPtr, year);
  }

  public void RemoveAllPoints() {
    AkaApiPINVOKE.InterestRateModel_RemoveAllPoints(swigCPtr);
  }

  public double GetRate(double year) {
    double ret = AkaApiPINVOKE.InterestRateModel_GetRate(swigCPtr, year);
    return ret;
  }

  public double GetFactor(double year) {
    double ret = AkaApiPINVOKE.InterestRateModel_GetFactor(swigCPtr, year);
    return ret;
  }

  public static double ZeroToFactor(double rate, double year) {
    double ret = AkaApiPINVOKE.InterestRateModel_ZeroToFactor(rate, year);
    return ret;
  }

  public static double FactorToZero(double discount, double year) {
    double ret = AkaApiPINVOKE.InterestRateModel_FactorToZero(discount, year);
    return ret;
  }

  public bool SetVolatility(double arg0) {
    bool ret = AkaApiPINVOKE.InterestRateModel_SetVolatility(swigCPtr, arg0);
    return ret;
  }

  public double GetVolatility() {
    double ret = AkaApiPINVOKE.InterestRateModel_GetVolatility__SWIG_0(swigCPtr);
    return ret;
  }

  public bool SetAlpha(double arg0) {
    bool ret = AkaApiPINVOKE.InterestRateModel_SetAlpha(swigCPtr, arg0);
    return ret;
  }

  public double GetAlpha() {
    double ret = AkaApiPINVOKE.InterestRateModel_GetAlpha(swigCPtr);
    return ret;
  }

  public bool SetLongVolatility(double arg0) {
    bool ret = AkaApiPINVOKE.InterestRateModel_SetLongVolatility(swigCPtr, arg0);
    return ret;
  }

  public double GetLongVolatility() {
    double ret = AkaApiPINVOKE.InterestRateModel_GetLongVolatility(swigCPtr);
    return ret;
  }

  public InterestRateModel.INPUTTYPE GetInputType() {
    InterestRateModel.INPUTTYPE ret = (InterestRateModel.INPUTTYPE)AkaApiPINVOKE.InterestRateModel_GetInputType(swigCPtr);
    return ret;
  }

  public bool IsParCurve() {
    bool ret = AkaApiPINVOKE.InterestRateModel_IsParCurve(swigCPtr);
    return ret;
  }

  public int Solve() {
    int ret = AkaApiPINVOKE.InterestRateModel_Solve(swigCPtr);
    return ret;
  }

  public double Discount(double value, double fromtime, double oas) {
    double ret = AkaApiPINVOKE.InterestRateModel_Discount__SWIG_0(swigCPtr, value, fromtime, oas);
    return ret;
  }

  public double Discount(double value, double fromtime) {
    double ret = AkaApiPINVOKE.InterestRateModel_Discount__SWIG_1(swigCPtr, value, fromtime);
    return ret;
  }

  public double GetVolatility(double fromtime) {
    double ret = AkaApiPINVOKE.InterestRateModel_GetVolatility__SWIG_1(swigCPtr, fromtime);
    return ret;
  }

  public void EnableCompatibility() {
    AkaApiPINVOKE.InterestRateModel_EnableCompatibility(swigCPtr);
  }

  public enum INPUTTYPE {
    FACTORCURVE,
    PARCURVE
  }

}

}
