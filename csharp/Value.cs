/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace AndrewKalotayAssociates {

using System;
using System.Runtime.InteropServices;

public class Value : Status {
  private HandleRef swigCPtr;

  internal Value(IntPtr cPtr, bool cMemoryOwn) : base(AkaApiPINVOKE.Value_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Value obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Value() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkaApiPINVOKE.delete_Value(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Value(Bond arg0, Date pvdate) : this(AkaApiPINVOKE.new_Value__SWIG_1(Bond.getCPtr(arg0), Date.getCPtr(pvdate)), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Value(Bond arg0, Date pvdate, Date tradedate) : this(AkaApiPINVOKE.new_Value__SWIG_2(Bond.getCPtr(arg0), Date.getCPtr(pvdate), Date.getCPtr(tradedate)), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Value(Bond arg0, InterestRateModel arg1, Date pvdate) : this(AkaApiPINVOKE.new_Value__SWIG_3(Bond.getCPtr(arg0), InterestRateModel.getCPtr(arg1), Date.getCPtr(pvdate)), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Value(Bond arg0, InterestRateModel arg1, Date pvdate, Date tradedate) : this(AkaApiPINVOKE.new_Value__SWIG_4(Bond.getCPtr(arg0), InterestRateModel.getCPtr(arg1), Date.getCPtr(pvdate), Date.getCPtr(tradedate)), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Value(Bond arg0, InterestRateModel arg1, SinkingFundStatus arg2, Date pvdate) : this(AkaApiPINVOKE.new_Value__SWIG_5(Bond.getCPtr(arg0), InterestRateModel.getCPtr(arg1), SinkingFundStatus.getCPtr(arg2), Date.getCPtr(pvdate)), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Value(Bond arg0, InterestRateModel arg1, SinkingFundStatus arg2, Date pvdate, Date tradedate) : this(AkaApiPINVOKE.new_Value__SWIG_6(Bond.getCPtr(arg0), InterestRateModel.getCPtr(arg1), SinkingFundStatus.getCPtr(arg2), Date.getCPtr(pvdate), Date.getCPtr(tradedate)), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int Reset(Bond arg0, Date pvdate) {
    int ret = AkaApiPINVOKE.Value_Reset__SWIG_0(swigCPtr, Bond.getCPtr(arg0), Date.getCPtr(pvdate));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Reset(Bond arg0, Date pvdate, Date tradedate) {
    int ret = AkaApiPINVOKE.Value_Reset__SWIG_1(swigCPtr, Bond.getCPtr(arg0), Date.getCPtr(pvdate), Date.getCPtr(tradedate));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Reset(Bond arg0, InterestRateModel arg1, Date pvdate) {
    int ret = AkaApiPINVOKE.Value_Reset__SWIG_2(swigCPtr, Bond.getCPtr(arg0), InterestRateModel.getCPtr(arg1), Date.getCPtr(pvdate));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Reset(Bond arg0, InterestRateModel arg1, Date pvdate, Date tradedate) {
    int ret = AkaApiPINVOKE.Value_Reset__SWIG_3(swigCPtr, Bond.getCPtr(arg0), InterestRateModel.getCPtr(arg1), Date.getCPtr(pvdate), Date.getCPtr(tradedate));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Reset(Bond arg0, InterestRateModel arg1, SinkingFundStatus arg2, Date pvdate) {
    int ret = AkaApiPINVOKE.Value_Reset__SWIG_4(swigCPtr, Bond.getCPtr(arg0), InterestRateModel.getCPtr(arg1), SinkingFundStatus.getCPtr(arg2), Date.getCPtr(pvdate));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Reset(Bond arg0, InterestRateModel arg1, SinkingFundStatus arg2, Date pvdate, Date tradedate) {
    int ret = AkaApiPINVOKE.Value_Reset__SWIG_5(swigCPtr, Bond.getCPtr(arg0), InterestRateModel.getCPtr(arg1), SinkingFundStatus.getCPtr(arg2), Date.getCPtr(pvdate), Date.getCPtr(tradedate));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double BadValue {
    get {
      double ret = AkaApiPINVOKE.Value_BadValue_get();
      return ret;
    } 
  }

  public int FlowCount() {
    int ret = AkaApiPINVOKE.Value_FlowCount(swigCPtr);
    return ret;
  }

  public int FlowType(int arg0) {
    int ret = AkaApiPINVOKE.Value_FlowType__SWIG_0(swigCPtr, arg0);
    return ret;
  }

  public bool FlowType(int idx, Value.FLOWTYPE t) {
    bool ret = AkaApiPINVOKE.Value_FlowType__SWIG_1(swigCPtr, idx, (int)t);
    return ret;
  }

  public int FirstFlow() {
    int ret = AkaApiPINVOKE.Value_FirstFlow(swigCPtr);
    return ret;
  }

  public Date FlowDate(int arg0) {
    Date ret = new Date(AkaApiPINVOKE.Value_FlowDate(swigCPtr, arg0), true);
    return ret;
  }

  public double YearsTo(int arg0) {
    double ret = AkaApiPINVOKE.Value_YearsTo(swigCPtr, arg0);
    return ret;
  }

  public double Interest(int arg0) {
    double ret = AkaApiPINVOKE.Value_Interest(swigCPtr, arg0);
    return ret;
  }

  public double Principal(int arg0) {
    double ret = AkaApiPINVOKE.Value_Principal(swigCPtr, arg0);
    return ret;
  }

  public double PrincipalPrice(int arg0) {
    double ret = AkaApiPINVOKE.Value_PrincipalPrice(swigCPtr, arg0);
    return ret;
  }

  public double Accrued(int arg0) {
    double ret = AkaApiPINVOKE.Value_Accrued__SWIG_0(swigCPtr, arg0);
    return ret;
  }

  public double CallPrice(int arg0) {
    double ret = AkaApiPINVOKE.Value_CallPrice(swigCPtr, arg0);
    return ret;
  }

  public double PutPrice(int arg0) {
    double ret = AkaApiPINVOKE.Value_PutPrice(swigCPtr, arg0);
    return ret;
  }

  public string BondName() {
    string ret = AkaApiPINVOKE.Value_BondName(swigCPtr);
    return ret;
  }

  public double Accrued() {
    double ret = AkaApiPINVOKE.Value_Accrued__SWIG_1(swigCPtr);
    return ret;
  }

  public int AccruedDays() {
    int ret = AkaApiPINVOKE.Value_AccruedDays(swigCPtr);
    return ret;
  }

  public double AccruedOn(Date arg0) {
    double ret = AkaApiPINVOKE.Value_AccruedOn(swigCPtr, Date.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetYieldMethod(Bond.YIELD_METHOD arg0) {
    bool ret = AkaApiPINVOKE.Value_SetYieldMethod(swigCPtr, (int)arg0);
    return ret;
  }

  public Bond.YIELD_METHOD GetYieldMethod() {
    Bond.YIELD_METHOD ret = (Bond.YIELD_METHOD)AkaApiPINVOKE.Value_GetYieldMethod(swigCPtr);
    return ret;
  }

  public double YieldToCall(double price) {
    double ret = AkaApiPINVOKE.Value_YieldToCall(swigCPtr, price);
    return ret;
  }

  public double YieldToPut(double price) {
    double ret = AkaApiPINVOKE.Value_YieldToPut(swigCPtr, price);
    return ret;
  }

  public double YieldToMaturity(double price) {
    double ret = AkaApiPINVOKE.Value_YieldToMaturity(swigCPtr, price);
    return ret;
  }

  public double YieldToWorst(double price, bool also_to_sink) {
    double ret = AkaApiPINVOKE.Value_YieldToWorst__SWIG_0(swigCPtr, price, also_to_sink);
    return ret;
  }

  public double YieldToWorst(double price) {
    double ret = AkaApiPINVOKE.Value_YieldToWorst__SWIG_1(swigCPtr, price);
    return ret;
  }

  public double YieldToWorst(double price, SWIGTYPE_p_int flowindex, bool also_to_sink) {
    double ret = AkaApiPINVOKE.Value_YieldToWorst__SWIG_2(swigCPtr, price, SWIGTYPE_p_int.getCPtr(flowindex), also_to_sink);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double YieldToWorst(double price, SWIGTYPE_p_int flowindex) {
    double ret = AkaApiPINVOKE.Value_YieldToWorst__SWIG_3(swigCPtr, price, SWIGTYPE_p_int.getCPtr(flowindex));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double WeightedAverageMaturity(double price) {
    double ret = AkaApiPINVOKE.Value_WeightedAverageMaturity(swigCPtr, price);
    return ret;
  }

  public Duration ModifiedDuration(double px) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_ModifiedDuration(swigCPtr, px), true);
    return ret;
  }

  public double YieldToFlow(int arg0, double price, bool as_cashflow_yield) {
    double ret = AkaApiPINVOKE.Value_YieldToFlow__SWIG_0(swigCPtr, arg0, price, as_cashflow_yield);
    return ret;
  }

  public double YieldToFlow(int arg0, double price) {
    double ret = AkaApiPINVOKE.Value_YieldToFlow__SWIG_1(swigCPtr, arg0, price);
    return ret;
  }

  public Duration ModifiedDurationToFlow(int arg0, double price, double yield) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_ModifiedDurationToFlow(swigCPtr, arg0, price, yield), true);
    return ret;
  }

  public double ytm2price(double arg0) {
    double ret = AkaApiPINVOKE.Value_ytm2price(swigCPtr, arg0);
    return ret;
  }

  public double ytc2price(double arg0) {
    double ret = AkaApiPINVOKE.Value_ytc2price(swigCPtr, arg0);
    return ret;
  }

  public double ytp2price(double arg0) {
    double ret = AkaApiPINVOKE.Value_ytp2price(swigCPtr, arg0);
    return ret;
  }

  public double Price(double oas) {
    double ret = AkaApiPINVOKE.Value_Price__SWIG_0(swigCPtr, oas);
    return ret;
  }

  public double Price(Quote arg0) {
    double ret = AkaApiPINVOKE.Value_Price__SWIG_1(swigCPtr, Quote.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double OAS(double price) {
    double ret = AkaApiPINVOKE.Value_OAS__SWIG_0(swigCPtr, price);
    return ret;
  }

  public double OAS(Quote arg0) {
    double ret = AkaApiPINVOKE.Value_OAS__SWIG_1(swigCPtr, Quote.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double OptionValue(double oas) {
    double ret = AkaApiPINVOKE.Value_OptionValue__SWIG_0(swigCPtr, oas);
    return ret;
  }

  public double OptionValue(Quote arg0) {
    double ret = AkaApiPINVOKE.Value_OptionValue__SWIG_1(swigCPtr, Quote.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double PriceToFlow(int arg0, double yield, bool as_cashflow_yield) {
    double ret = AkaApiPINVOKE.Value_PriceToFlow__SWIG_0(swigCPtr, arg0, yield, as_cashflow_yield);
    return ret;
  }

  public double PriceToFlow(int arg0, double yield) {
    double ret = AkaApiPINVOKE.Value_PriceToFlow__SWIG_1(swigCPtr, arg0, yield);
    return ret;
  }

  public double PriceToWorst(double yield, bool also_to_sinks) {
    double ret = AkaApiPINVOKE.Value_PriceToWorst__SWIG_0(swigCPtr, yield, also_to_sinks);
    return ret;
  }

  public double PriceToWorst(double yield) {
    double ret = AkaApiPINVOKE.Value_PriceToWorst__SWIG_1(swigCPtr, yield);
    return ret;
  }

  public double PriceToWorst(double yield, SWIGTYPE_p_int flowindex, bool also_to_sinks) {
    double ret = AkaApiPINVOKE.Value_PriceToWorst__SWIG_2(swigCPtr, yield, SWIGTYPE_p_int.getCPtr(flowindex), also_to_sinks);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double PriceToWorst(double yield, SWIGTYPE_p_int flowindex) {
    double ret = AkaApiPINVOKE.Value_PriceToWorst__SWIG_3(swigCPtr, yield, SWIGTYPE_p_int.getCPtr(flowindex));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Duration EffectiveDuration(double oas, double durationbp) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_EffectiveDuration__SWIG_0(swigCPtr, oas, durationbp), true);
    return ret;
  }

  public Duration EffectiveDuration(double oas) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_EffectiveDuration__SWIG_1(swigCPtr, oas), true);
    return ret;
  }

  public Duration EffectiveDuration(Quote arg0, double durationbp) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_EffectiveDuration__SWIG_2(swigCPtr, Quote.getCPtr(arg0), durationbp), true);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Duration EffectiveDuration(Quote arg0) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_EffectiveDuration__SWIG_3(swigCPtr, Quote.getCPtr(arg0)), true);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double UpDuration(double oas, double durationbp) {
    double ret = AkaApiPINVOKE.Value_UpDuration__SWIG_0(swigCPtr, oas, durationbp);
    return ret;
  }

  public double UpDuration(double oas) {
    double ret = AkaApiPINVOKE.Value_UpDuration__SWIG_1(swigCPtr, oas);
    return ret;
  }

  public double DownDuration(double oas, double durationbp) {
    double ret = AkaApiPINVOKE.Value_DownDuration__SWIG_0(swigCPtr, oas, durationbp);
    return ret;
  }

  public double DownDuration(double oas) {
    double ret = AkaApiPINVOKE.Value_DownDuration__SWIG_1(swigCPtr, oas);
    return ret;
  }

  public double UpDuration(Quote arg0, double durationbp) {
    double ret = AkaApiPINVOKE.Value_UpDuration__SWIG_2(swigCPtr, Quote.getCPtr(arg0), durationbp);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double UpDuration(Quote arg0) {
    double ret = AkaApiPINVOKE.Value_UpDuration__SWIG_3(swigCPtr, Quote.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double DownDuration(Quote arg0, double durationbp) {
    double ret = AkaApiPINVOKE.Value_DownDuration__SWIG_2(swigCPtr, Quote.getCPtr(arg0), durationbp);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double DownDuration(Quote arg0) {
    double ret = AkaApiPINVOKE.Value_DownDuration__SWIG_3(swigCPtr, Quote.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Duration KeyRateDuration(double oas, double durationbp, double year) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_KeyRateDuration__SWIG_0(swigCPtr, oas, durationbp, year), true);
    return ret;
  }

  public Duration KeyRateDuration(Quote arg0, double durationbp, double year) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_KeyRateDuration__SWIG_1(swigCPtr, Quote.getCPtr(arg0), durationbp, year), true);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Duration KeyRateDuration(double oas, double durationbp, double year, double width) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_KeyRateDuration__SWIG_2(swigCPtr, oas, durationbp, year, width), true);
    return ret;
  }

  public Duration KeyRateDuration(Quote arg0, double durationbp, double year, double width) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_KeyRateDuration__SWIG_3(swigCPtr, Quote.getCPtr(arg0), durationbp, year, width), true);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Duration KeyRateDuration(double oas, double durationbp, double year, double leftanchoryear, double rightanchoryear) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_KeyRateDuration__SWIG_4(swigCPtr, oas, durationbp, year, leftanchoryear, rightanchoryear), true);
    return ret;
  }

  public Duration KeyRateDuration(Quote arg0, double durationbp, double year, double leftanchoryear, double rightanchoryear) {
    Duration ret = new Duration(AkaApiPINVOKE.Value_KeyRateDuration__SWIG_5(swigCPtr, Quote.getCPtr(arg0), durationbp, year, leftanchoryear, rightanchoryear), true);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Discount(double value, double fromtime, double oas) {
    double ret = AkaApiPINVOKE.Value_Discount__SWIG_0(swigCPtr, value, fromtime, oas);
    return ret;
  }

  public double Discount(double value, double fromtime) {
    double ret = AkaApiPINVOKE.Value_Discount__SWIG_1(swigCPtr, value, fromtime);
    return ret;
  }

  public double GetRate(double year) {
    double ret = AkaApiPINVOKE.Value_GetRate(swigCPtr, year);
    return ret;
  }

  public double GetFactor(double year) {
    double ret = AkaApiPINVOKE.Value_GetFactor(swigCPtr, year);
    return ret;
  }

  public bool AnalyzeScenario(InterestRateScenario arg0, double oas, ScenarioAnalysis arg2) {
    bool ret = AkaApiPINVOKE.Value_AnalyzeScenario__SWIG_0(swigCPtr, InterestRateScenario.getCPtr(arg0), oas, ScenarioAnalysis.getCPtr(arg2));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AnalyzeScenario(InterestRateScenario arg0, Quote arg1, ScenarioAnalysis arg2) {
    bool ret = AkaApiPINVOKE.Value_AnalyzeScenario__SWIG_1(swigCPtr, InterestRateScenario.getCPtr(arg0), Quote.getCPtr(arg1), ScenarioAnalysis.getCPtr(arg2));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double AssetSwapSpread(double price) {
    double ret = AkaApiPINVOKE.Value_AssetSwapSpread(swigCPtr, price);
    return ret;
  }

  public double ISpread(double price) {
    double ret = AkaApiPINVOKE.Value_ISpread(swigCPtr, price);
    return ret;
  }

  public enum FLOWTYPE {
    INTEREST = 1,
    PRINCIPAL = 2,
    CALLOPTION = 4,
    PUTOPTION = 8,
    PSEUDO_REGULAR = 16
  }

}

}
