/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace AndrewKalotayAssociates {

using System;
using System.Runtime.InteropServices;

public class Bond : Status {
  private HandleRef swigCPtr;

  internal Bond(IntPtr cPtr, bool cMemoryOwn) : base(AkaApiPINVOKE.Bond_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Bond obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Bond() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkaApiPINVOKE.delete_Bond(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Bond(string name, Date idate, Date mdate, double coupon) : this(AkaApiPINVOKE.new_Bond__SWIG_0(name, Date.getCPtr(idate), Date.getCPtr(mdate), coupon), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Bond(Bond arg0) : this(AkaApiPINVOKE.new_Bond__SWIG_1(Bond.getCPtr(arg0)), true) {
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool SetDaycount(Bond.DAYCOUNT arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetDaycount(swigCPtr, (int)arg0);
    return ret;
  }

  public bool SetFrequency(Bond.FREQUENCY arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetFrequency(swigCPtr, (int)arg0);
    return ret;
  }

  public bool SetRedemptionPrice(double arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetRedemptionPrice(swigCPtr, arg0);
    return ret;
  }

  public bool SetIssuePrice(double arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetIssuePrice(swigCPtr, arg0);
    return ret;
  }

  public bool SetFaceAmount(uint arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetFaceAmount__SWIG_0(swigCPtr, arg0);
    return ret;
  }

  public bool SetFaceAmount(double arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetFaceAmount__SWIG_1(swigCPtr, arg0);
    return ret;
  }

  public bool SetFirstCoupon(Date arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetFirstCoupon(swigCPtr, Date.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetLastCoupon(Date arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetLastCoupon(swigCPtr, Date.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetPayDayEndOfMonth(bool arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetPayDayEndOfMonth(swigCPtr, arg0);
    return ret;
  }

  public bool SetPayDay(int arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetPayDay(swigCPtr, arg0);
    return ret;
  }

  public bool SetYieldMethod(Bond.YIELD_METHOD arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetYieldMethod(swigCPtr, (int)arg0);
    return ret;
  }

  public bool SetCall(Date arg0, double px) {
    bool ret = AkaApiPINVOKE.Bond_SetCall(swigCPtr, Date.getCPtr(arg0), px);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetPut(Date arg0, double px) {
    bool ret = AkaApiPINVOKE.Bond_SetPut(swigCPtr, Date.getCPtr(arg0), px);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetSink(Date arg0, double amount, double px) {
    bool ret = AkaApiPINVOKE.Bond_SetSink__SWIG_0(swigCPtr, Date.getCPtr(arg0), amount, px);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetSink(Date arg0, double amount) {
    bool ret = AkaApiPINVOKE.Bond_SetSink__SWIG_1(swigCPtr, Date.getCPtr(arg0), amount);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetCoupon(Date arg0, double arg1) {
    bool ret = AkaApiPINVOKE.Bond_SetCoupon(swigCPtr, Date.getCPtr(arg0), arg1);
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetXCouponDays(int arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetXCouponDays(swigCPtr, arg0);
    return ret;
  }

  public void RemoveCall(Date arg0) {
    AkaApiPINVOKE.Bond_RemoveCall(swigCPtr, Date.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemovePut(Date arg0) {
    AkaApiPINVOKE.Bond_RemovePut(swigCPtr, Date.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveSink(Date arg0) {
    AkaApiPINVOKE.Bond_RemoveSink(swigCPtr, Date.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveCoupon(Date arg0) {
    AkaApiPINVOKE.Bond_RemoveCoupon(swigCPtr, Date.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool SetNoticePeriod(int arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetNoticePeriod(swigCPtr, arg0);
    return ret;
  }

  public bool SetOptionDelay(int d) {
    bool ret = AkaApiPINVOKE.Bond_SetOptionDelay(swigCPtr, d);
    return ret;
  }

  public bool SetCallAmerican(bool is_american) {
    bool ret = AkaApiPINVOKE.Bond_SetCallAmerican(swigCPtr, is_american);
    return ret;
  }

  public bool SetPutAmerican(bool is_american) {
    bool ret = AkaApiPINVOKE.Bond_SetPutAmerican(swigCPtr, is_american);
    return ret;
  }

  public bool SetSinkOption(bool allow_delivery, double acceleration, Bond.ALLOCATION allocation) {
    bool ret = AkaApiPINVOKE.Bond_SetSinkOption(swigCPtr, allow_delivery, acceleration, (int)allocation);
    return ret;
  }

  public bool SetCouponSchedulePeriod(bool at_begin) {
    bool ret = AkaApiPINVOKE.Bond_SetCouponSchedulePeriod(swigCPtr, at_begin);
    return ret;
  }

  public Bond.NotifyBehavior SetNotifyBehavior(Bond.NotifyBehavior arg0) {
    Bond.NotifyBehavior ret = (Bond.NotifyBehavior)AkaApiPINVOKE.Bond_SetNotifyBehavior(swigCPtr, (int)arg0);
    return ret;
  }

  public bool SetBusinessDayWeekends(bool arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetBusinessDayWeekends(swigCPtr, arg0);
    return ret;
  }

  public bool SetHoliday(Date arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetHoliday(swigCPtr, Date.getCPtr(arg0));
    if (AkaApiPINVOKE.SWIGPendingException.Pending) throw AkaApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetHolidays(Date arg0, int arg1) {
    bool ret = AkaApiPINVOKE.Bond_SetHolidays(swigCPtr, Date.getCPtr(arg0), arg1);
    return ret;
  }

  public bool ClearHolidays() {
    bool ret = AkaApiPINVOKE.Bond_ClearHolidays(swigCPtr);
    return ret;
  }

  public bool SetMortgage() {
    bool ret = AkaApiPINVOKE.Bond_SetMortgage(swigCPtr);
    return ret;
  }

  public bool SetAmortization(double years) {
    bool ret = AkaApiPINVOKE.Bond_SetAmortization(swigCPtr, years);
    return ret;
  }

  public bool SetMortgageRefinanceCost(double arg0) {
    bool ret = AkaApiPINVOKE.Bond_SetMortgageRefinanceCost(swigCPtr, arg0);
    return ret;
  }

  public void ClearMortgage() {
    AkaApiPINVOKE.Bond_ClearMortgage(swigCPtr);
  }

  public string GetName() {
    string ret = AkaApiPINVOKE.Bond_GetName(swigCPtr);
    return ret;
  }

  public Date GetInitialDate() {
    Date ret = new Date(AkaApiPINVOKE.Bond_GetInitialDate(swigCPtr), true);
    return ret;
  }

  public Date GetMaturityDate() {
    Date ret = new Date(AkaApiPINVOKE.Bond_GetMaturityDate(swigCPtr), true);
    return ret;
  }

  public double GetCoupon() {
    double ret = AkaApiPINVOKE.Bond_GetCoupon(swigCPtr);
    return ret;
  }

  public Bond.DAYCOUNT GetDaycount() {
    Bond.DAYCOUNT ret = (Bond.DAYCOUNT)AkaApiPINVOKE.Bond_GetDaycount(swigCPtr);
    return ret;
  }

  public Bond.FREQUENCY GetFrequency() {
    Bond.FREQUENCY ret = (Bond.FREQUENCY)AkaApiPINVOKE.Bond_GetFrequency(swigCPtr);
    return ret;
  }

  public double GetFaceAmount() {
    double ret = AkaApiPINVOKE.Bond_GetFaceAmount(swigCPtr);
    return ret;
  }

  public enum DAYCOUNT {
    DC_30_360,
    DC_30E_360,
    DC_ACT_360,
    DC_ACT_365,
    DC_ACT_ACT
  }

  public enum FREQUENCY {
    FREQ_INT_AT_MATURITY,
    FREQ_ANNUAL,
    FREQ_SEMIANNUAL,
    FREQ_QUARTERLY,
    FREQ_MONTHLY
  }

  public enum YIELD_METHOD {
    YLD_BEY = 1,
    YLD_SIMPLE_LAST_PERIOD,
    YLD_SIMPLE_LAST_YEAR,
    YLD_MUNI
  }

  public enum ALLOCATION {
    ALLOC_PRORATA,
    ALLOC_FRONT,
    ALLOC_BACK
  }

  public enum NotifyBehavior {
    BusinessDaysExtend,
    BusinessDaysOnly
  }

}

}
